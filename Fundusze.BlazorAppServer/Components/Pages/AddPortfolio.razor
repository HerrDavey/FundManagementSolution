@page "/portfolios/add"
@rendermode InteractiveServer

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Dodaj Portfel</PageTitle>

<MudPaper Class="p-4 mx-auto" MaxWidth="500px">
    <MudForm @ref="_form" Model="_portfolio" @bind-IsValid="@_success">
        <MudText Typo="Typo.h3" Class="mb-4">Nowy Portfel Inwestycyjny</MudText>

        @if (_allFunds is null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <div class="mud-form-item mud-input-control mb-4">
                <label class="mud-input-label mud-input-label-animated">Wybierz fundusz</label>
                <select @bind="_portfolio.FundId" class="form-select" required>
                    <option value="0" disabled selected>Proszę wybrać...</option>
                    @foreach (var fund in _allFunds)
                    {
                        <option value="@fund.Id">@fund.Name</option>
                    }
                </select>
            </div>
        }

        <MudNumericField T="decimal" @bind-Value="_portfolio.NAV" Label="Wartość Aktywów Netto (NAV)" For="@(() => _portfolio.NAV)" Required="true" Min="0.00m" />

        @* POPRAWKA: Wiązanie daty jako string *@
        <MudTextField T="string" @bind-Value="_dateString" InputType="InputType.Date" Label="Data utworzenia" Required="true" />

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick="SubmitForm">
                Zapisz
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="BackToList">
                Powrót do listy
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form = default!;
    private bool _success;
    private List<FundDto>? _allFunds;

    private InvestmentPortfolioDto _portfolio = new();
    private string _dateString = DateTime.Now.ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _allFunds = await Http.GetFromJsonAsync<List<FundDto>>("api/fund");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Nie udało się załadować listy funduszy: {ex.Message}", Severity.Error);
        }
    }

    private async Task SubmitForm()
    {
        await _form.Validate();
        if (_portfolio.FundId == 0) _success = false;
        if (string.IsNullOrEmpty(_dateString)) _success = false;

        if (!_success)
        {
            Snackbar.Add("Proszę poprawnie wypełnić formularz.", Severity.Warning);
            return;
        }

        _portfolio.CreatedDate = DateTime.Parse(_dateString);

        var response = await Http.PostAsJsonAsync("api/investmentportfolio", _portfolio);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Portfel został zapisany!", Severity.Success);
            BackToList();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Wystąpił błąd podczas zapisu: {error}", Severity.Error);
        }
    }

    private void BackToList()
    {
        NavigationManager.NavigateTo("/portfolios");
    }
}
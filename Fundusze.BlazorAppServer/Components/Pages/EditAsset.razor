@page "/assets/edit/{Id:int}"
@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Edytuj Aktywo</PageTitle>

<MudPaper Class="p-4 mx-auto" MaxWidth="500px">
    <MudText Typo="Typo.h5" Class="mb-4">Edytuj Aktywo</MudText>

    @if (_asset is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudForm @ref="_form" Model="_asset" @bind-IsValid="_success">
            <MudTextField @bind-Value="_asset.Name" Label="Nazwa aktywa" For="@(() => _asset.Name)" Required="true" />
            <MudTextField @bind-Value="_asset.Type" Label="Typ" For="@(() => _asset.Type)" Required="true" />
            <MudTextField @bind-Value="_asset.ISIN" Label="ISIN" For="@(() => _asset.ISIN)" Required="true" />
            <MudNumericField T="decimal" @bind-Value="_asset.Price" Label="Cena" For="@(() => _asset.Price)" Required="true" Min="0.01m" />

            <div class="d-flex align-center justify-space-between mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick="SubmitForm">
                    Zapisz zmiany
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("/assets"))">
                    Anuluj
                </MudButton>
            </div>
        </MudForm>
    }
</MudPaper>

@code {
    [Parameter] public int Id { get; set; }

    private MudForm _form = default!;
    private bool _success;
    private AssetDto? _asset;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _asset = await Http.GetFromJsonAsync<AssetDto>($"api/asset/{Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania danych: {ex.Message}", Severity.Error);
        }
    }

    private async Task SubmitForm()
    {
        await _form.Validate();
        if (!_success) return;

        var response = await Http.PutAsJsonAsync($"api/asset/{Id}", _asset);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Zmiany zostały zapisane.", Severity.Success);
            NavigationManager.NavigateTo("/assets");
        }
        else
        {
            Snackbar.Add("Błąd podczas zapisu zmian.", Severity.Error);
        }
    }
}
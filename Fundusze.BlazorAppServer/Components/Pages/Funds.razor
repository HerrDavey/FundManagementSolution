@page "/funds"
@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@* Nie potrzebujemy już DialogService, więc można go usunąć, ale zostawienie go nie szkodzi *@
@inject IDialogService DialogService

<PageTitle>Fundusze</PageTitle>

<MudPaper Class="p-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Lista funduszy</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/funds/add"))">Dodaj nowy</MudButton>
    </div>

    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (_funds != null)
    {
        <MudTable Items="@_funds" Hover="true">
            <HeaderContent>
                <MudTh>Nazwa</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>Zarządzający</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nazwa">@context.Name</MudTd>
                <MudTd DataLabel="Typ">@context.Type</MudTd>
                <MudTd DataLabel="Zarządzający">@context.Managed</MudTd>
                <MudTd>
                    @* Nowa logika potwierdzenia wewnątrz wiersza *@
                    @if (_fundPendingDelete?.Id == context.Id)
                    {
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteFund(context.Id))">Potwierdź</MudButton>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _fundPendingDelete = null)">Anuluj</MudButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditFund(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => _fundPendingDelete = context)" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Color="Color.Error">Nie udało się załadować danych.</MudText>
    }
</MudPaper>

@code {
    private List<FundDto>? _funds;
    private bool _loading = true;

    // Nowa właściwość do przechowywania rekordu czekającego na usunięcie
    private FundDto? _fundPendingDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _funds = await Http.GetFromJsonAsync<List<FundDto>>("api/fund");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading funds: {ex.Message}");
            _funds = null;
        }
        finally
        {
            _loading = false;
        }
    }

    private void EditFund(int id)
    {
        NavigationManager.NavigateTo($"/funds/edit/{id}");
    }

    private async Task DeleteFund(int id)
    {
        var response = await Http.DeleteAsync($"api/fund/{id}");
        if (response.IsSuccessStatusCode)
        {
            var fundToRemove = _funds.FirstOrDefault(f => f.Id == id);
            if (fundToRemove != null)
            {
                _funds.Remove(fundToRemove);
            }
            Snackbar.Add("Fundusz został usunięty.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Wystąpił błąd podczas usuwania funduszu.", Severity.Error);
        }
        // Resetujemy stan, aby przyciski wróciły do normy
        _fundPendingDelete = null;
        StateHasChanged();
    }
}
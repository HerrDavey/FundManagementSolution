@page "/transactions/add"
@using System.Web

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Dodaj Transakcję</PageTitle>

<MudPaper Class="p-4 mx-auto" MaxWidth="500px">
    <MudForm @ref="_form" Model="_transaction" @bind-IsValid="@_success">
        <MudText Typo="Typo.h3" Class="mb-4">Nowa Transakcja</MudText>

        @if (_allPortfolios is null || _allAssets is null || _allFunds is null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <div class="mud-form-item mud-input-control mb-4">
                <label class="mud-input-label mud-input-label-animated">Portfel</label>
                <select value="@_transaction.PorfolioId" @onchange="OnPortfolioSelectionChanged" class="form-select" required>
                    <option value="0" disabled selected>Proszę wybrać...</option>
                    @foreach (var portfolio in _allPortfolios)
                    {
                        <option value="@portfolio.Id">@portfolio.FundName</option>
                    }
                </select>
            </div>

            <div class="mud-form-item mud-input-control mb-4">
                <label class="mud-input-label mud-input-label-animated">Aktywo</label>
                <select @bind="_transaction.AssetId" class="form-select" required disabled="@(_transaction.PorfolioId == 0)">
                    <option value="0" disabled selected>Proszę wybrać...</option>
                    @foreach (var asset in _filteredAssets)
                    {
                        <option value="@asset.Id">@asset.Name</option>
                    }
                </select>
            </div>

            <MudSelect T="string" @bind-Value="_transaction.Type" Label="Typ transakcji" Required="true">
                <MudSelectItem T="string" Value="@("Buy")">Buy</MudSelectItem>
                <MudSelectItem T="string" Value="@("Sell")">Sell</MudSelectItem>
            </MudSelect>

            <MudTextField T="string" @bind-Value="_dateString" InputType="InputType.Date" Label="Data transakcji" Required="true" />
            <MudNumericField T="int" @bind-Value="_transaction.Quantity" Label="Ilość" Required="true" Min="1" />
            <MudNumericField T="decimal" @bind-Value="_transaction.Price" Label="Cena" For="@(() => _transaction.Price)" Required="true" Min="0.01m" />
        }

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton ButtonType="ButtonType.Button" OnClick="SubmitForm" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)">
                Dodaj
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="BackToList">
                Powrót do listy
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form = default!;
    private bool _success;

    private CreateTransactionDto _transaction = new() { Type = "Buy" };
    private string _dateString = DateTime.Now.ToString("yyyy-MM-dd");
    
    private List<InvestmentPortfolioDto>? _allPortfolios;
    private List<AssetDto>? _allAssets;
    private List<FundDto>? _allFunds;
    private List<AssetDto> _filteredAssets = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);
        if (int.TryParse(queryParams["portfolioId"], out var portfolioId))
        {
            _transaction.PorfolioId = portfolioId;
        }

        try
        {
            await Task.WhenAll(LoadPortfolios(), LoadAssets(), LoadFunds());
            if (_transaction.PorfolioId != 0)
            {
                FilterAssets(_transaction.PorfolioId);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Nie udało się załadować danych: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadPortfolios()
    {
        _allPortfolios = await Http.GetFromJsonAsync<List<InvestmentPortfolioDto>>("api/investmentportfolio");
    }

    private async Task LoadAssets()
    {
        _allAssets = await Http.GetFromJsonAsync<List<AssetDto>>("api/asset");
    }

    private async Task LoadFunds()
    {
        _allFunds = await Http.GetFromJsonAsync<List<FundDto>>("api/fund");
    }

    private void OnPortfolioSelectionChanged(ChangeEventArgs e)
    {
        var selectedIdStr = e.Value?.ToString();
        if(int.TryParse(selectedIdStr, out var selectedId))
        {
            _transaction.PorfolioId = selectedId;
            _transaction.AssetId = 0; 
            FilterAssets(selectedId);
        }
    }
    
    private void FilterAssets(int portfolioId)
    {
        _filteredAssets.Clear();
        var selectedPortfolio = _allPortfolios?.FirstOrDefault(p => p.Id == portfolioId);
        var selectedFund = _allFunds?.FirstOrDefault(f => f.Id == selectedPortfolio?.FundId);

        if (selectedFund != null && _allAssets != null)
        {
            switch (selectedFund.Type)
            {
                case "Akcyjny":
                    _filteredAssets = _allAssets.Where(a => a.Type == "Akcja").ToList();
                    break;
                case "Obligacyjny":
                    _filteredAssets = _allAssets.Where(a => a.Type == "Obligacja").ToList();
                    break;
                case "ETF":
                     _filteredAssets = _allAssets.Where(a => a.Type == "ETF").ToList();
                    break;
                
                case "Mieszany":
                    _filteredAssets = _allAssets.ToList();
                    break;

                default:
                    _filteredAssets = new List<AssetDto>();
                    break;
            }
        }
    }

    private async Task SubmitForm()
    {
        await _form.Validate();
        if (string.IsNullOrEmpty(_dateString) || _transaction.PorfolioId == 0 || _transaction.AssetId == 0) _success = false;

        if (!_success)
        {
            Snackbar.Add("Proszę poprawnie wypełnić formularz.", Severity.Warning);
            return;
        }

        _transaction.TransactionDate = DateTime.Parse(_dateString);
        var response = await Http.PostAsJsonAsync("api/transaction", _transaction);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Transakcja została zapisana! Wartość portfela zaktualizowana.", Severity.Success);
            BackToList();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Wystąpił błąd podczas zapisu: {error}", Severity.Error);
        }
    }

    private void BackToList()
    {
        if (_transaction.PorfolioId != 0)
        {
            NavigationManager.NavigateTo($"/portfolios/{_transaction.PorfolioId}");
        }
        else
        {
            NavigationManager.NavigateTo("/transactions");
        }
    }
}
@page "/assets"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Aktywa</PageTitle>

<MudPaper Class="p-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Lista Dostępnych Aktywów</MudText>
    </div>

    @if (_assets is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudTable Items="@_assets" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Nazwa</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>ISIN</MudTh>
                <MudTh>Domyślna cena</MudTh> 
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nazwa">@context.Name</MudTd>
                <MudTd DataLabel="Typ">@context.Type</MudTd>
                <MudTd DataLabel="ISIN">@context.ISIN</MudTd>
                <MudTd DataLabel="Domyślna cena">@context.Price.ToString("C")</MudTd> 
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private List<AssetDto>? _assets;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _assets = await Http.GetFromJsonAsync<List<AssetDto>>("api/asset");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd ładowania danych: {ex.Message}", Severity.Error);
        }
    }
}
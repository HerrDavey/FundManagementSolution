@page "/transactions"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Transakcje</PageTitle>

<MudPaper Class="p-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Lista Transakcji</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/transactions/add"))">Dodaj nową</MudButton>
    </div>

    @if (_transactions is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudTable Items="@_transactions" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Data</MudTh>
                <MudTh>Typ</MudTh>
                <MudTh>Aktywo</MudTh>
                <MudTh>Portfel</MudTh>
                <MudTh>Ilość</MudTh>
                <MudTh>Cena</MudTh>
                <MudTh>Wartość</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Data">@context.TransactionDate.ToShortDateString()</MudTd>
                <MudTd DataLabel="Typ">
                    <MudChip T="string" Color="@(context.Type == "Buy" ? Color.Success : Color.Error)">@context.Type</MudChip>
                </MudTd>
                <MudTd DataLabel="Aktywo">@context.AssetName</MudTd>
                <MudTd DataLabel="Portfel">@context.PortfolioInfo</MudTd>
                <MudTd DataLabel="Ilość">@context.Quantity</MudTd>
                <MudTd DataLabel="Cena">@context.Price.ToString("C")</MudTd>
                <MudTd DataLabel="Wartość">@((context.Quantity * context.Price).ToString("C"))</MudTd>
                <MudTd>
                    @if (_transactionPendingDelete?.Id == context.Id)
                    {
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteTransaction(context.Id))">Potwierdź</MudButton>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => _transactionPendingDelete = null)">Anuluj</MudButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditTransaction(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => _transactionPendingDelete = context)" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private List<TransactionDto>? _transactions;
    private TransactionDto? _transactionPendingDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _transactions = await Http.GetFromJsonAsync<List<TransactionDto>>("api/transaction");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd ładowania danych: {ex.Message}", Severity.Error);
        }
    }

    private void EditTransaction(int id)
    {
        NavigationManager.NavigateTo($"/transactions/edit/{id}");
    }

    private async Task DeleteTransaction(int id)
    {
        var response = await Http.DeleteAsync($"api/transaction/{id}");
        if (response.IsSuccessStatusCode)
        {
            var itemToRemove = _transactions?.FirstOrDefault(t => t.Id == id);
            if (itemToRemove != null)
            {
                _transactions.Remove(itemToRemove);
            }
            Snackbar.Add("Transakcja została usunięta.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Wystąpił błąd podczas usuwania transakcji.", Severity.Error);
        }
        _transactionPendingDelete = null;
        StateHasChanged();
    }
}